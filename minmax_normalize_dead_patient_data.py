# -*- coding: utf-8 -*-
"""minmax_normalize_dead_patient_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1au-zdnumkHN6f6cm3o5oQENVSPBnAYLi
"""

from google.colab import files
uploaded = files.upload()

#Performed min/max normalization on valuenum for each corresponding itemid 
#(specifically on ICU patients who met inclusion/exclusion criteria and are dead)
# Formula = (value - min)/(max - min)

import math
import numpy as np
import pandas as pd

data = pd.read_csv("chartevents - dead.csv")

item_ids = data['itemid'].unique()   #find unique itemids
len(item_ids)                        #find length of itemids
size = (len(item_ids),3)             #define dimension of new matrix
min_max_matrix  = np.zeros(size)     #create matrix that will store corresponding min and max of valuenum for every itemid

for x in range(len(item_ids)):      
  min_max_matrix[x,0] = item_ids[x]
  min_max_matrix[x,1] = data['valuenum'].loc[(data['itemid'] == item_ids[x]) & (data['valuenum'] != 'NaN')].min()
  min_max_matrix[x,2] = data['valuenum'].loc[(data['itemid'] == item_ids[x]) & (data['valuenum'] != 'NaN')].max()

for y in range(len(data)):
    result = np.where(min_max_matrix == data['itemid'].loc[y]);
    if np.isnan(min_max_matrix[result[0][0]][1]):
      min_max_matrix[result[0][0]][1] = 100001;
    elif np.isnan(min_max_matrix[result[0][0]][2]):
      min_max_matrix[result[0][0]][2] = 100001;
    elif min_max_matrix[result[0][0]][1] == min_max_matrix[result[0][0]][2]:
      min_max_matrix[result[0][0]][1] = 100001;
      min_max_matrix[result[0][0]][2] = 100001;
    elif (min_max_matrix[result[0][0]][1] != 100001) & (min_max_matrix[result[0][0]][2] != 100001):
      data['valuenum'].loc[y] = (data['valuenum'].loc[y] -  min_max_matrix[result[0][0]][1])/(min_max_matrix[result[0][0]][2] - min_max_matrix[result[0][0]][1]);

data.to_csv(r"chartevents_dead_minmax_normalized.csv", index = False)
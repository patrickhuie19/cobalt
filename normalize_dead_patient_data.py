# -*- coding: utf-8 -*-
"""Normalize_Dead_Patient_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12bpaV-AV7zCWjUxJtOaIz66EvJh_4VGJ
"""

from google.colab import files
uploaded = files.upload()

import math
import numpy as np
import pandas as pd

data = pd.read_csv("chartevents - dead.csv")

item_ids = data['itemid'].unique()   #find unique itemids
len(item_ids)                        #find length of itemids
size = (len(item_ids),3)             #define dimension of new matrix
min_max_matrix  = np.zeros(size)     #create matrix that will store corresponding min and max of valuenum for every itemid

for x in range(len(item_ids)):      
  min_max_matrix[x,0] = item_ids[x]
  min_max_matrix[x,1] = data['valuenum'].loc[(data['itemid'] == item_ids[x]) & (data['valuenum'] != 'NaN')].min()
  min_max_matrix[x,2] = data['valuenum'].loc[(data['itemid'] == item_ids[x]) & (data['valuenum'] != 'NaN')].max()

#Formula for min/max normalization
# https://www.codecademy.com/articles/normalization#:~:text=Min%2Dmax%20normalization%20is%20one,decimal%20between%200%20and%201.&text=That%20data%20is%20just%20as%20squished%20as%20before!
# new value = (value - min) / (max-min)
# for every valuenum associated with a certain itemid (ie 723), apply the formula above

#for every row in the data dataframe
#when itemid == itemid in min_max_matrix
  #take the corresponding (valuenum -  min_max_matrix[x,1])/(in_max_matrix[x,2] - min_max_matrix[x,1])
data_norm = data;
for y in range(len(data)):
    result = np.where(min_max_matrix == data_norm['itemid'].loc[y]);
    if np.isnan(min_max_matrix[result[0][0]][1]):
      min_max_matrix[result[0][0]][1] = 100001;
    elif np.isnan(min_max_matrix[result[0][0]][2]):
      min_max_matrix[result[0][0]][2] = 100001;
    elif min_max_matrix[result[0][0]][1] == min_max_matrix[result[0][0]][2]:
      min_max_matrix[result[0][0]][1] = 100001;
      min_max_matrix[result[0][0]][2] = 100001;
    elif (min_max_matrix[result[0][0]][1] != 100001) & (min_max_matrix[result[0][0]][2] != 100001):
      data_norm['valuenum'].loc[y] = (data_norm['valuenum'].loc[y] -  min_max_matrix[result[0][0]][1])/(min_max_matrix[result[0][0]][2] - min_max_matrix[result[0][0]][1]);

data_norm.to_csv(r"chartevents_dead_minmax_normalized.csv", index = False)